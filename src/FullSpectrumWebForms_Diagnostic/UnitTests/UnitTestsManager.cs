using FSW.Controls.Html;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace FSW.Diagnostic
{
    public class UnitTestsManager : IDisposable
    {


        private static int NextRequestId = 1;
        private Task HostTask;
        private IWebHost Host;
        public UnitTestsManager()
        {
        }
        public void Initialize<CallingClass>()
        {
            Host = WebHost.CreateDefaultBuilder()
            .UseUrls("http://localhost:666")
            .UseStartup<Startup_UnitTests<CallingClass>>()
            .Build();
            HostTask = Host.RunAsync();
            System.Threading.Thread.Sleep(TimeSpan.FromSeconds(0.5));

        }
        private static readonly ConcurrentDictionary<int, UnitTests.EmptyPageResult> PendingUnitTestRequests = new ConcurrentDictionary<int, UnitTests.EmptyPageResult>();
        public static void ProcessPendingUnitTestRequest(int requestId, Pages.AutoGeneratedPage autoGeneratedPage)
        {
            var result = PendingUnitTestRequests[requestId];
            result.Page = autoGeneratedPage;
            Task.Run(() =>
            {
                System.Threading.Thread.Sleep(TimeSpan.FromMilliseconds(50));
                result.TaskCompletionSource.TrySetResult(result);
            });
        }

        public Task<UnitTests.EmptyPageResult> CreateEmptyPageTest(bool show = false)
        {
            var path = @"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe";

            if (!System.IO.File.Exists(path))
                path = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Google\Chrome\Application\chrome.exe");
            if (!System.IO.File.Exists(path))
                path = "google-chrome";
            var pageResult = new UnitTests.EmptyPageResult();

            var temp = System.IO.Path.GetTempPath();
            temp += System.IO.Path.DirectorySeparatorChar + "FSW";

            pageResult.UnitTestRequestId = System.Threading.Interlocked.Increment(ref NextRequestId);

            Process.Start(path, @"http://localhost:666/AutoGeneratedPage?requestId=" + pageResult.UnitTestRequestId +
                @" --incognito " + (show ? "" : "--window-size=1,1 --window-position=99999,99999 --user-data-dir=" + temp));

            var taskSrc = new TaskCompletionSource<UnitTests.EmptyPageResult>();
            pageResult.TaskCompletionSource = taskSrc;
            PendingUnitTestRequests[pageResult.UnitTestRequestId] = pageResult;

            return taskSrc.Task;
        }
        public Task<UnitTests.HtmlPageResult> CreatePageTestFromHTML(bool show = false, [CallerMemberName] string fileName = "")
        {
            if (!fileName.EndsWith(".html"))
                fileName += ".html";

            var callerClass = new StackFrame(1).GetMethod().DeclaringType.Namespace.Replace('.', System.IO.Path.DirectorySeparatorChar);
            callerClass = callerClass.Substring(callerClass.IndexOf(System.IO.Path.DirectorySeparatorChar) + 1);
            var path = System.IO.Path.Combine(callerClass, fileName);

            var taskSrc = new TaskCompletionSource<UnitTests.HtmlPageResult>();

            CreateEmptyPageTest(show).ContinueWith(result =>
            {
                var page = result.Result;
                TemplateContainer templateContainer;

                using (page.ServerSideLock)
                {
                    templateContainer = new TemplateContainer(page.Page, path);
                    page.Container.Children.Add(templateContainer);
                }

                taskSrc.TrySetResult(new UnitTests.HtmlPageResult()
                {
                    EmptyPageResult = page,
                    TemplateContainer = templateContainer
                });
            });

            return taskSrc.Task;

        }
        private bool IsDisposed = false;
        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;
            Host.StopAsync().Wait();
            HostTask.Wait();
        }

        private static UnitTestsManager _UnitTestsManager;
        private static readonly object _lock = new object();
        public static UnitTestsManager GetUnitTestsManager<CallingType>()
        {
            lock (_lock)
            {
                if (_UnitTestsManager is null)
                {
                    _UnitTestsManager = new UnitTestsManager();
                    _UnitTestsManager.Initialize<CallingType>();
                }
                return _UnitTestsManager;
            }
        }
    }
}
